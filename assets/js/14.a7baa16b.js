(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{577:function(v,_,e){"use strict";e.r(_);var t=e(14),i=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"初始化仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化仓库"}},[v._v("#")]),v._v(" 初始化仓库")]),v._v(" "),e("p",[v._v("初始化仓库 "),e("code",[v._v("git init")])]),v._v(" "),e("p",[v._v("初始化裸仓库 "),e("code",[v._v("git init --bare")])]),v._v(" "),e("p",[v._v("克隆仓库 "),e("code",[v._v("git clone <git-repo>")])]),v._v(" "),e("h2",{attrs:{id:"远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库"}},[v._v("#")]),v._v(" 远程仓库")]),v._v(" "),e("p",[v._v("添加远程仓库并命名为 "),e("code",[v._v("origin git remote add origin <git-repo>")])]),v._v(" "),e("p",[v._v("修改远程仓库的地址 "),e("code",[v._v("git remote set-url origin <git-repo>")])]),v._v(" "),e("p",[v._v("列出所有的远程仓库 "),e("code",[v._v("git remote -v")])]),v._v(" "),e("p",[v._v("列出远程仓库 "),e("code",[v._v("origin")]),v._v(" 的详细信息 "),e("code",[v._v("git remote show origin")])]),v._v(" "),e("h2",{attrs:{id:"推送与拉取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#推送与拉取"}},[v._v("#")]),v._v(" 推送与拉取")]),v._v(" "),e("p",[v._v("git config push.default simple "),e("code",[v._v("设置默认推送策略为 simple")])]),v._v(" "),e("p",[v._v("推送 "),e("code",[v._v("master")]),v._v(" 到远程仓库 "),e("code",[v._v("git push origin master")])]),v._v(" "),e("p",[v._v("推送到远程仓库并建立追踪关系 "),e("code",[v._v("git push -u origin master")])]),v._v(" "),e("p",[v._v("推送时忽略 "),e("code",[v._v("pre-push hook git push -n")])]),v._v(" "),e("p",[v._v("从远程仓库拉取文件 "),e("code",[v._v("git pull origin master")])]),v._v(" "),e("p",[v._v("设置 "),e("code",[v._v("rebase")]),v._v(" 模式拉取代码 "),e("code",[v._v("git pull --rebase origin master")])]),v._v(" "),e("h2",{attrs:{id:"提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交"}},[v._v("#")]),v._v(" 提交")]),v._v(" "),e("p",[v._v("提交 "),e("code",[v._v("git commit -m <message>")])]),v._v(" "),e("p",[v._v("追加提交重置提交信息 "),e("code",[v._v("git commit --amend -m <message>")])]),v._v(" "),e("p",[v._v("重置作者 "),e("code",[v._v("git commit --amend --author=<mail>")])]),v._v(" "),e("p",[v._v("允许空提交 "),e("code",[v._v("git commit --allow-empty")])]),v._v(" "),e("p",[v._v("提交时跳过 "),e("code",[v._v("pre-commit hook git commit -n")])]),v._v(" "),e("h2",{attrs:{id:"配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[v._v("#")]),v._v(" 配置")]),v._v(" "),e("p",[v._v("编辑配置文件 "),e("code",[v._v("git config [--global] -e")])]),v._v(" "),e("p",[v._v("列出配置信息 "),e("code",[v._v("git config -l")])]),v._v(" "),e("p",[v._v("获取相应的配置 "),e("code",[v._v("git config --get core.editor")])]),v._v(" "),e("p",[v._v("配置用户邮箱 "),e("code",[v._v("git config --global user.email <mail>")])]),v._v(" "),e("p",[v._v("配置用户名 "),e("code",[v._v("git config --global user.name <name>")])]),v._v(" "),e("p",[v._v("输出彩色信息 "),e("code",[v._v("git config color.ui true")])]),v._v(" "),e("p",[v._v("设置文件名大小写敏感 "),e("code",[v._v("git config core.ignoreCase false")])]),v._v(" "),e("p",[v._v("设置推送策略为 "),e("code",[v._v("simple git config push.default simple")])]),v._v(" "),e("p",[v._v("设置 git 的编辑器是 "),e("code",[v._v("vim git config --global core.editor vim")])]),v._v(" "),e("p",[v._v("设置命令别名 "),e("code",[v._v("git config --global alias.co checkout")])]),v._v(" "),e("h2",{attrs:{id:"忽略文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件"}},[v._v("#")]),v._v(" 忽略文件")]),v._v(" "),e("p",[v._v("添加本项目的忽略文件 "),e("code",[v._v("vim .gitignore")])]),v._v(" "),e("p",[v._v("添加本项目的忽略文件并不把此文件纳入版本管理 "),e("code",[v._v("vim .git/info/exclude")])]),v._v(" "),e("p",[v._v("设置全局忽略文件 "),e("code",[v._v("git config --global core.excludesfile ~/.gitignore")])]),v._v(" "),e("p",[v._v("对已加入版本管理的文件不做更改检查 "),e("code",[v._v("git update-index --assume-unchanged <file>")])]),v._v(" "),e("p",[v._v("对已加入版本管理的文件做更改检查 "),e("code",[v._v("git update-index --no-assume-unchanged <file>")])]),v._v(" "),e("h2",{attrs:{id:"添加删除移动文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加删除移动文件"}},[v._v("#")]),v._v(" 添加删除移动文件")]),v._v(" "),e("p",[v._v("添加所有文件到暂存区，包括未追踪文件 "),e("code",[v._v("git add -A")])]),v._v(" "),e("p",[v._v("更新暂存区文件 "),e("code",[v._v("git add -u")])]),v._v(" "),e("p",[v._v("交互式添加文件到暂存区 "),e("code",[v._v("git add -p")])]),v._v(" "),e("p",[v._v("工作区与暂存区删除文件 "),e("code",[v._v("git rm <file>")])]),v._v(" "),e("p",[v._v("仅暂存区删除文件 "),e("code",[v._v("git rm --cached <file>")])]),v._v(" "),e("p",[v._v("重命名暂存区文件 "),e("code",[v._v("git mv <file> <file1>")])]),v._v(" "),e("h2",{attrs:{id:"工作区状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作区状态"}},[v._v("#")]),v._v(" 工作区状态")]),v._v(" "),e("p",[v._v("查看工作区的信息 "),e("code",[v._v("git status")])]),v._v(" "),e("p",[v._v("查看工作区信息并显示分支及追踪信息 "),e("code",[v._v("git status -sb")])]),v._v(" "),e("p",[v._v("并查看忽略文件的信息 "),e("code",[v._v("git status --ignored")])]),v._v(" "),e("p",[v._v("列出忽略文件 "),e("code",[v._v("git check-ignore *")])]),v._v(" "),e("h2",{attrs:{id:"显示更改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#显示更改"}},[v._v("#")]),v._v(" 显示更改")]),v._v(" "),e("p",[v._v("显示工作区与暂存区的不同 "),e("code",[v._v("git diff")])]),v._v(" "),e("p",[v._v("显示暂存区与本地仓库的不同 "),e("code",[v._v("git diff --cached")])]),v._v(" "),e("p",[v._v("显示工作区，暂存区与本地仓库的不同 "),e("code",[v._v("git diff HEAD")])]),v._v(" "),e("p",[v._v("仅显示改变的文件 "),e("code",[v._v("git diff --name-only")])]),v._v(" "),e("p",[v._v("比较两次提交的差异 "),e("code",[v._v("git diff <commit> <commit>")])]),v._v(" "),e("p",[v._v("显示某次 "),e("code",[v._v("commit")]),v._v(" 所做的更改 "),e("code",[v._v("git show <commit>")])]),v._v(" "),e("h2",{attrs:{id:"列出文件信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#列出文件信息"}},[v._v("#")]),v._v(" 列出文件信息")]),v._v(" "),e("p",[v._v("列出暂存区文件 "),e("code",[v._v("git ls-files")])]),v._v(" "),e("p",[v._v("列出忽略文件与未追踪文件 "),e("code",[v._v("git ls-files -o")])]),v._v(" "),e("p",[v._v("子目录中显示所在位置 "),e("code",[v._v("git ls-files --full-name")])]),v._v(" "),e("h2",{attrs:{id:"储藏与恢复"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#储藏与恢复"}},[v._v("#")]),v._v(" 储藏与恢复")]),v._v(" "),e("p",[v._v("储藏(stash)工作区相对暂存区更改的文件 "),e("code",[v._v("git stash -m 'xxx'")])]),v._v(" "),e("p",[v._v("储藏文件并添加描述信息 "),e("code",[v._v("git stash save <message>")])]),v._v(" "),e("p",[v._v("恢复最后一次储藏的文件 "),e("code",[v._v("git stash apply")])]),v._v(" "),e("p",[v._v("恢复最后一次储藏的文件并删除此次储存记录 "),e("code",[v._v("git stash pop")])]),v._v(" "),e("p",[v._v("恢复某一次储藏 "),e("code",[v._v("git stash apply ${xxx}")])]),v._v(" "),e("p",[v._v("查看储藏列表 "),e("code",[v._v("git stash list")])]),v._v(" "),e("p",[v._v("清除储藏列表 "),e("code",[v._v("git stash clear")])]),v._v(" "),e("h2",{attrs:{id:"恢复工作区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#恢复工作区"}},[v._v("#")]),v._v(" 恢复工作区")]),v._v(" "),e("p",[v._v("重置工作区某文件 "),e("code",[v._v("git checkout -- <file>")])]),v._v(" "),e("p",[v._v("重置工作区 "),e("code",[v._v("git checkout .")])]),v._v(" "),e("p",[v._v("列出将要清除的未追踪文件 "),e("code",[v._v("git clean -n")])]),v._v(" "),e("p",[v._v("清除未追踪文件 "),e("code",[v._v("git clean -f")])]),v._v(" "),e("p",[v._v("清除忽略文件 "),e("code",[v._v("git clean -Xf")])]),v._v(" "),e("p",[v._v("清除未追踪目录及文件 "),e("code",[v._v("git clean -df")])]),v._v(" "),e("h2",{attrs:{id:"回退版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回退版本"}},[v._v("#")]),v._v(" 回退版本")]),v._v(" "),e("p",[v._v("重置暂存区 "),e("code",[v._v("git reset")])]),v._v(" "),e("p",[v._v("重置工作区和暂存区 "),e("code",[v._v("git reset --hard")])]),v._v(" "),e("p",[v._v("恢复本分支到某次提交，重置工作区与暂存区 "),e("code",[v._v("git reset --hard <commit-ish>")])]),v._v(" "),e("p",[v._v("恢复本分支到某次提交 "),e("code",[v._v("git reset --soft <commit-ish>")])]),v._v(" "),e("p",[v._v("恢复本分支到某次提交，重置暂存区 "),e("code",[v._v("git reset --mixed <commit-ish>")])]),v._v(" "),e("p",[v._v("反向恢复一个提交并生成新的提交 "),e("code",[v._v("git revert <commit>")])]),v._v(" "),e("h2",{attrs:{id:"分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[v._v("#")]),v._v(" 分支")]),v._v(" "),e("p",[v._v("列出本地分支 "),e("code",[v._v("git branch")])]),v._v(" "),e("p",[v._v("列出本地分支与追踪关系 "),e("code",[v._v("git branch -vv")])]),v._v(" "),e("p",[v._v("列出远程分支 "),e("code",[v._v("git branch -r")])]),v._v(" "),e("p",[v._v("列出所有分支 "),e("code",[v._v("git branch -a")])]),v._v(" "),e("p",[v._v("建立分支不切换工作区 "),e("code",[v._v("git branch <branch>")])]),v._v(" "),e("p",[v._v("删除已被合并的分支 "),e("code",[v._v("git branch -d <branch>")])]),v._v(" "),e("p",[v._v("强制删除未被合并的分支 "),e("code",[v._v("git branch -D <branch>")])]),v._v(" "),e("p",[v._v("更改分支名字 "),e("code",[v._v("git branch -m <newbranch>")])]),v._v(" "),e("p",[v._v("设置追踪分支 "),e("code",[v._v("git branch -u <upstream>")])]),v._v(" "),e("h2",{attrs:{id:"切换分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#切换分支"}},[v._v("#")]),v._v(" 切换分支")]),v._v(" "),e("p",[v._v("切换分支 "),e("code",[v._v("git checkout <branch>")])]),v._v(" "),e("p",[v._v("建立分支并切换工作区 "),e("code",[v._v("git checkout -b <branch>")])]),v._v(" "),e("p",[v._v("切换到最近一次分支 "),e("code",[v._v("git checkout -")])]),v._v(" "),e("p",[v._v("建立无任何提交历史的分支 "),e("code",[v._v("git checkout --orphan <branch>")])]),v._v(" "),e("h2",{attrs:{id:"合并分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[v._v("#")]),v._v(" 合并分支")]),v._v(" "),e("p",[v._v("合并 develop分支 到 本分支 "),e("code",[v._v("git merge develop")])]),v._v(" "),e("p",[v._v("强制合并分支后生成 "),e("code",[v._v("merge commit git merge -no-ff develop")])]),v._v(" "),e("p",[v._v("合并最近切换分支 "),e("code",[v._v("git merge -")])]),v._v(" "),e("p",[v._v("变基合并 develop 分支 "),e("code",[v._v("git rebase develop")])]),v._v(" "),e("p",[v._v("变基进入交互式界面 "),e("code",[v._v("git rebase -i")])]),v._v(" "),e("h2",{attrs:{id:"日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日志"}},[v._v("#")]),v._v(" 日志")]),v._v(" "),e("p",[v._v("显示提交日志 "),e("code",[v._v("git log")])]),v._v(" "),e("p",[v._v("显示某文件的提交日志 "),e("code",[v._v("git log -p <file>")])]),v._v(" "),e("p",[v._v("以图表形式显示提交日志 "),e("code",[v._v("git log --graph --all --oneline --decorate")])]),v._v(" "),e("p",[v._v("显示每次提交的对象信息 "),e("code",[v._v("git log --pretty=raw")])]),v._v(" "),e("p",[v._v("显示某个时间段的提交信息 "),e("code",[v._v("git log --since '2 days ago'")])]),v._v(" "),e("p",[v._v("显示指定作者的提交信息 "),e("code",[v._v("git log --author=<author>")])]),v._v(" "),e("p",[v._v("根据提交信息中的关键字查找 "),e("code",[v._v("git log --grep=<keyword>")])]),v._v(" "),e("p",[v._v("根据提交源码中的关键字查找 "),e("code",[v._v("git log -S <keyword>")])]),v._v(" "),e("p",[v._v("列出二者特有的提交 "),e("code",[v._v("git log master...develop")])]),v._v(" "),e("p",[v._v("列出 branch 有而 branch2 没有的提交 "),e("code",[v._v("git log branch2..branch")])]),v._v(" "),e("p",[v._v("仅显示 "),e("code",[v._v("merge commit git log --merges")])]),v._v(" "),e("p",[v._v("统计每个作者的提交情况 "),e("code",[v._v("git shortlog")])]),v._v(" "),e("p",[v._v("统计每个作者的提交个数 "),e("code",[v._v("git shortlog -sn")])]),v._v(" "),e("h2",{attrs:{id:"标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[v._v("#")]),v._v(" 标签")]),v._v(" "),e("p",[v._v("列出所有标签并显示标签信息 "),e("code",[v._v("git tag -ln")])]),v._v(" "),e("p",[v._v("添加一个标签 "),e("code",[v._v("git tag -a v1.0.0 -m <message>")])]),v._v(" "),e("p",[v._v("在某个 commit 上添加一个标签 "),e("code",[v._v("git tag v0.9.0 <commit>")])]),v._v(" "),e("p",[v._v("删除一个标签 "),e("code",[v._v("git tag -d v1.0.0")])]),v._v(" "),e("p",[v._v("查看某个标签信息 "),e("code",[v._v("git show v1.0.0")])]),v._v(" "),e("p",[v._v("推送所有标签到远程仓库 "),e("code",[v._v("git push --tags")])]),v._v(" "),e("p",[v._v("使用最近的标签描述本次提交 "),e("code",[v._v("git describe")])]),v._v(" "),e("h2",{attrs:{id:"追责-甩锅"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#追责-甩锅"}},[v._v("#")]),v._v(" 追责（甩锅）")]),v._v(" "),e("p",[v._v("找到最后一次提交的作者 "),e("code",[v._v("git blame <file>")])]),v._v(" "),e("p",[v._v("找到具体某一段的最后一次提交 "),e("code",[v._v("git blame -L 10,18 <file>")])]),v._v(" "),e("p",[v._v("查找文件的修改历史及明细 "),e("code",[v._v("git log -p <file>")])]),v._v(" "),e("h2",{attrs:{id:"确认坏的提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#确认坏的提交"}},[v._v("#")]),v._v(" 确认坏的提交")]),v._v(" "),e("p",[v._v("二分查找坏的提交")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git bisect start")])]),v._v(" "),e("li",[e("code",[v._v("git checkout HEAD~20")])]),v._v(" "),e("li",[e("code",[v._v("git bisect good")])]),v._v(" "),e("li",[e("code",[v._v("git bisect bad")])]),v._v(" "),e("li",[e("code",[v._v("git bisect reset")])])]),v._v(" "),e("h2",{attrs:{id:"git-对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-对象"}},[v._v("#")]),v._v(" git 对象")]),v._v(" "),e("p",[v._v("获取改摘要信息的类型 "),e("code",[v._v("git cat-file -t <hash>")])]),v._v(" "),e("p",[v._v("获取改摘要信息的内容 "),e("code",[v._v("git cat-file -p <hash>")])]),v._v(" "),e("h2",{attrs:{id:"查找"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查找"}},[v._v("#")]),v._v(" 查找")]),v._v(" "),e("p",[v._v("在已追踪文件中查找关键字并指明行号 "),e("code",[v._v("git grep -n hello")])]),v._v(" "),e("h2",{attrs:{id:"打包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#打包"}},[v._v("#")]),v._v(" 打包")]),v._v(" "),e("p",[v._v("打包 "),e("code",[v._v("git archive -o arch.zip HEAD")])])])}),[],!1,null,null,null);_.default=i.exports}}]);