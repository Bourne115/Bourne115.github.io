(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{623:function(t,s,n){"use strict";n.r(s);var a=n(14),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"关于异步的一些概念上的读书摘记"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于异步的一些概念上的读书摘记"}},[t._v("#")]),t._v(" 关于异步的一些概念上的读书摘记")]),t._v(" "),n("h2",{attrs:{id:"异步-现在与将来"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步-现在与将来"}},[t._v("#")]),t._v(" 异步：现在与将来")]),t._v(" "),n("blockquote",[n("p",[t._v("程序中"),n("code",[t._v("现在运行的部分")]),t._v("和"),n("code",[t._v("未来运行的部分")]),t._v("之间的关系就是异步编程的核心")])]),t._v(" "),n("blockquote",[n("p",[t._v("从现在到将来的"),n("code",[t._v("等待")]),t._v("，最简单的方法（但绝对不是唯一的，甚至也不是最好的！）是使用一个通常称为回调函数的函数")])]),t._v(" "),n("blockquote",[n("p",[t._v("任何时候，只要把一段包装成一个函数，并指定它在响应某个事件（定时器、鼠标点击事件、Ajax 响应等）时执行，你就是在代码中创建了一个\n"),n("code",[t._v("将来执行的块")]),t._v("，也由此在这个程序中引入了异步机制")])]),t._v(" "),n("blockquote",[n("p",[n("code",[t._v("console.*")]),t._v("是由宿主环境添加到"),n("code",[t._v("JavaScript")]),t._v("中的。因此，在某些条件下，某些浏览器的"),n("code",[t._v("console.log(..)")]),t._v("并不会\n把传入的内容立即输出。浏览器在后台处理控制台"),n("code",[t._v("I/O")]),t._v("能够提高性能，这时用户甚至可能根本意识不到其发生。")])]),t._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"title"}),n("p",[t._v("如果遇到"),n("code",[t._v("console.log(..)")]),t._v("打印的结果出乎意料，要意识到这可能是浏览器控制台"),n("code",[t._v("I/O异步化造成的。 最好的选择是在")]),t._v("JavaScript`调试器中使用断点，而不要依赖控制台输出。次优化的方案是把对象序列化到一个字符串中，\n以强制执行一次“快照”，比如通过 JSON.stringify(..)")])]),n("ul",[n("li",[n("p",[t._v("事件循环(Event Loop)\n宿主环境提供的一种机制来处理程序中多个块的执行，且执行每个块时调用"),n("code",[t._v("JavaScript")]),t._v("引擎，这种机制被称为事件循环。")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过一段伪代码了解一下这个概念")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eventLoop 是一个用作队列的数组")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (先进先出)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" eventLoop "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" event\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// “永远” 执行")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一次 tick")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eventLoop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拿到队列中的下一个事件")]),t._v("\n    event "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" eventLoop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("shift")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 现在，执行下一个事件")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("reportError")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br")])]),n("blockquote",[n("p",[t._v("循环的每一轮称为"),n("code",[t._v("一个tick")]),t._v("对每个"),n("code",[t._v("tick")]),t._v("而言，如果在队列中有等待事件，那么就会从队列中摘下一个事件并执行。\n这些事件就是你得回调函数")])])])]),t._v(" "),n("blockquote",[n("p",[t._v("一定要清楚，"),n("code",[t._v("setTimeout(..)")]),t._v("并没有把你的回调函数挂在事件循环队列中。它所做的是设定一个定时器，当定时器到时后，\n环境会把你的回调函数放到事件循环中，这样，在未来某个时刻的"),n("code",[t._v("tick")]),t._v("会摘下并执行这个回调\n如果事件循环中有 20 个排队的回调，那这个定时器的回调就得排在后面等，这也能解释"),n("code",[t._v("setTimeout(..)")]),t._v("定时器的精度可能不高。\n大体来说，只能确保你的定时器回调函数不会再指定的时间间隔之前运行，但可能会在那个时刻运行，也可能在那之后运行，要根据\n事件队列的状态而定。")])]),t._v(" "),n("ul",[n("li",[t._v("并行")])]),t._v(" "),n("blockquote",[n("p",[t._v("异步是关于现在和将来的时间间隔，而并行是关于能够同时发生的事情")])]),t._v(" "),n("ul",[n("li",[t._v("并发")])]),t._v(" "),n("blockquote",[n("p",[t._v("是指两个或多个事件链时间发展交替执行，以至于从更高的层次来看，就像是同时在运行（尽管在任意时刻只能处理一件事情）")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("回调")])]),t._v(" "),n("li",[n("p",[t._v("任务\n在 Es6 中，有一个新的概念建立在事件循环队列之上，叫做任务队列（job queue）。")])]),t._v(" "),n("li",[n("p",[t._v("Promise")]),t._v(" "),n("blockquote",[n("p",[t._v("回调表达程序异步和管理并发的两个主要缺陷：缺乏顺序性和可信任性")])]),t._v(" "),n("blockquote",[n("p",[t._v("如果我们不把自己程序的 continuation（程序的延续）传给第三方，而是希望第三方给我们提供了解\n其任务何时结束的能力，然后由我们自己的代码来决定下一步做什么，那么这种范式就称为"),n("code",[t._v("Promise")])])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);